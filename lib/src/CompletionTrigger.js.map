{"version":3,"sources":["src/CompletionTrigger.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAEb;IACE,YAAsB,UAAU,IAAI;QAAd,YAAO,GAAP,OAAO,CAAO;IAAG,CAAC;CAGzC;AAJD,8CAIC;AAED,WAAmB,SAAQ,iBAAiB;IAC1C,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO;gBACzB,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAVD,sBAUC;AAED,WAAmB,SAAQ,iBAAiB;IAC1C,YAAsB,KAAa,EAAY,WAAoB,EAAE,OAAgB;QACnF,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,UAAK,GAAL,KAAK,CAAQ;QAAY,gBAAW,GAAX,WAAW,CAAS;IAEnE,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,GAAG,kBAAkB,IAAI,CAAC,WAAW,IAAI,GAAG,MAAM,CAAC;YACpF,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;qBAEG,QAAQ,sBAAsB,IAAI,CAAC,KAAK;gCAC7B,IAAI,CAAC,OAAO;WACjC;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAjBD,sBAiBC;AAED,cAAsB,SAAQ,iBAAiB;IAC7C,YAAsB,YAAqB,EAAE,OAAgB;QAC3D,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,iBAAY,GAAZ,YAAY,CAAS;IAE3C,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,IAAI,WAAW,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;YAEN,MAAM;gCACc,IAAI,CAAC,OAAO;WACjC;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAjBD,4BAiBC","file":"CompletionTrigger.js","sourcesContent":["'use strict';\n\nexport abstract class CompletionTrigger {\n  constructor(protected timeout = 1000) {}\n\n  public abstract async wait(client: any): Promise<any>;\n}\n\nexport class Timer extends CompletionTrigger {\n  constructor(timeout: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    return new Promise((resolve) => {\n      setTimeout(resolve, this.timeout);\n    });\n  }\n}\n\nexport class Event extends CompletionTrigger {\n  constructor(protected event: string, protected cssSelector?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const selector = this.cssSelector ? `querySelector('${this.cssSelector}')` : 'body';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise(resolve => {\n          document.${selector}.addEventListener('${this.event}', resolve, { once: true });\n          setTimeout(resolve, ${this.timeout});\n        })`,\n    });\n  }\n}\n\nexport class Callback extends CompletionTrigger {\n  constructor(protected callbackName?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const cbName = this.callbackName || 'htmlPdfCb';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise(resolve => {\n          ${cbName} = resolve;\n          setTimeout(resolve, ${this.timeout});\n        })`,\n    });\n  }\n}\n"],"sourceRoot":"../.."}